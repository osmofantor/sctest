class:: Dbjorklund2
summary:: Euclidean rhythms (durations) in demand rate
categories:: UGens>Demand
related:: Classes/Dbjorklund, Classes/Bjorklund, Classes/Pbjorklund, Classes/Tbjorklund

DESCRIPTION::
After an algorithm by E. Bjorklund. See paper by Godfried Toussaint.

Compared to LINK::Classes/Dbjorklund::, this version gives ratios for durations and not 1/0 pulses. So it will produce values like CODE::[3, 3, 2]:: instead of CODE::[1, 0, 0, 1, 0, 0, 1, 0]::. This is well suited as first input to a LINK::Classes/Duty:: or a LINK::Classes/TDuty::.


CLASSMETHODS::

METHOD:: new

ARGUMENT:: k
The number of 'hits'. Must be greater than 0.

ARGUMENT:: n
The total array size. Not modulate-able.

ARGUMENT:: offset
Starting index.

ARGUMENT:: length
Number of values to create. For repeating a number of complete cycles multiply this with CODE::n::.


EXAMPLES::

CODE::
s.boot;
{SinOsc.ar*Decay.ar(TDuty.ar(Dbjorklund2(3, 8)/8))*0.1!2}.play;  //tresillio
{SinOsc.ar*Decay.ar(TDuty.ar(Dbjorklund2(5, 8)/8))*0.1!2}.play;  //cinquillo
{SinOsc.ar*Decay.ar(TDuty.ar(Dbjorklund2(9, 16)/8))*0.1!2}.play;  //rumba

//nested DUGens
{SinOsc.ar*Decay.ar(TDuty.ar(Dseq([Dbjorklund2(4, 8, 0, 4), Dbjorklund2(3, 8, 0, 3)], inf)/8))*0.1!2}.play;

//triggers
{TDuty.ar(Dbjorklund2(5, 8)/8)*0.4!2}.play;

//using the mouse to control playback rate and k
{SinOsc.ar*Decay.ar(TDuty.ar(1/MouseX.kr(1, 50)*Dbjorklund2(MouseY.kr(1, 16).round, 16)), 0.1)*0.1!2}.play;

//multichannel expansion - here two different offsets
{SinOsc.ar([400, 500])*Decay.ar(TDuty.ar(Dbjorklund2(5, 8, [0, 1])/8), 0.3)*0.1}.play;

//slowly shifting the offset of one - repeating each offset 4 bars
{SinOsc.ar([400, 500])*Decay.ar(TDuty.ar(Dbjorklund2([3, 5], 8, [0, Ddup(5*4, Dseries(1, 1))])/8), 0.3)*0.1}.play;

//slowly shifting one of the k - repeating each k 4 bars
{SinOsc.ar([400, 500])*Decay.ar(TDuty.ar(Dbjorklund2([3, Ddup(Dseq((1..8), inf)*4, Dseq((1..8), inf))], 8)/8), 0.3)*0.1}.play;

//length makes it stop when done - here repeat twice (Duty's doneAction:2 free the synth). The click in the end is the Decay being cut off early.
{SinOsc.ar*Decay.ar(TDuty.ar(Dbjorklund2(5, 8, 0, 2*5)/8, doneAction:2), 0.3)*0.1!2}.play;


//using Duty
{SinOsc.ar(Duty.ar(Dbjorklund2(5, 8)/8, 0, Dseq([300, 400, 500, 600, 700], inf)))*0.1!2}.play;

{SinOscFB.ar(Duty.ar(Dbjorklund2([5, 7], 8)/8*0.9, 0, Dseq([300, 400, 500, 600, 700, 800], inf)), LFNoise2.kr(0.1).abs)*0.1}.play;

{Splay.ar(SinOscFB.ar(Duty.ar(Dbjorklund2([7, 9, 11], 12)/8*0.9, 0, Dseq([300, 400, 500, 600, 700, 800], inf)), LFNoise2.kr(0.1).abs))*0.1}.play;
::
