class:: Dsieve
summary:: Simple sieves
categories:: UGens>Demand
related:: Classes/Dbjorklund


DESCRIPTION::
Outputs binary values only.


CLASSMETHODS::

METHOD:: new

ARGUMENT:: indices
Indices to match.

ARGUMENT:: period
Periodicity.

ARGUMENT:: shift
Offset or add to the internal counter. Can be negative.

ARGUMENT:: repeats
Number of values to create.


EXAMPLES::

CODE::
s.boot;

{Duty.kr(0.1, 0, Dsieve(#[0, 1, 3], 4)).poll; DC.ar(0)}.play;
//-> [1, 1, 0, 1, ...]
100.collect{|i| #[0, 1, 3].includes(i%4).binaryValue};


{Duty.kr(0.1, 0, Dsieve(#[0, 2, 6, 7], 8)).poll; DC.ar(0)}.play;
//-> [1, 0, 1, 0, 0, 0, 1, 1, ...]
100.collect{|i| #[0, 2, 6, 7].includes(i%8).binaryValue};


//shifted one step to the right
{Duty.kr(0.1, 0, Dsieve(#[0, 1, 3], 4, 1)).poll; DC.ar(0)}.play;
//-> [1, 1, 1, 0, ...]
100.collect{|i| #[0, 1, 3].includes(i-1%4).binaryValue};


//fixed number of values - here 16 (ignore the last polled 1)
{Duty.kr(0.1, 0, Dsieve(#[0, 1, 3], 4, 0, 16), doneAction:2).poll; DC.ar(0)}.play;


//and (&)
{Duty.kr(0.1, 0, Dsieve(#[0, 1], 4) & Dsieve(#[0, 2], 4)).poll; DC.ar(0)}.play;
//-> [1, 0, 0, 0, ...]

//or (|)
{Duty.kr(0.1, 0, Dsieve(#[0, 1], 4) | Dsieve(#[0, 2], 4)).poll; DC.ar(0)}.play;
//-> [1, 1, 1, 0, ...]

//xor (bitXor)
{Duty.kr(0.1, 0, Dsieve(#[0, 1], 4) bitXor: Dsieve(#[0, 2], 4)).poll; DC.ar(0)}.play;
//-> [0, 1, 1, 0, ...]

//nand (1-and)
{Duty.kr(0.1, 0, 1 - (Dsieve(#[0, 1], 4) & Dsieve(#[0, 2], 4))).poll; DC.ar(0)}.play;
//-> [0, 1, 1, 1, ...]

//nor (1-or)
{Duty.kr(0.1, 0, 1 - (Dsieve(#[0, 1], 4) | Dsieve(#[0, 2], 4))).poll; DC.ar(0)}.play;
//-> [0, 0, 0, 1, ...]


//period and shift can be modulated (also with Demand rate UGens)
(
{
	var period= SinOsc.ar(0.1, 0, 1, #[8, 9]).round;
	var t= Duty.ar(0.1, 0, Dsieve(#[0, 3, 6, 7], period, 0, inf));
	SinOsc.ar(t+1*#[400, 600], 0, #[0.1, 0.05]).sum!2
}.play;
)

(
{
	var period= MouseX.kr(4, 16).round.poll;
	var t= Duty.ar(0.1, 0, Dsieve(#[0, 3, 6, 7], period, 0, inf));
	SinOsc.ar(Decay2.ar(t, 0.001, 0.02, 150, 30), 0, 0.1)!2
}.play;
)

(
{
	var period= MouseX.kr(4, 16).round.poll(label:\period);
	var shift= MouseY.kr(-2, 2).round.poll(label:\shift);
	var t= Duty.ar(0.1, 0, Dsieve(#[0, 3, 6, 7], period, shift, inf));
	var c= Duty.ar(0.1, 0, Dsieve(#[0], 4, 0, inf));
	SinOsc.ar(Decay2.ar(t, 0.001, 0.02, 150, 30), 0, 0.1)
	+SinOsc.ar(50, 0, Decay2.ar(c, 0.001, 0.01, 0.02))
	!2
}.play;
)


//the indices can also be modulated
(
{
	var indices= [0, LFTri.kr(0.02).range(0, 8).round.poll];
	var t= Duty.ar(0.05, 0, Dsieve(indices, 8, 0, inf));
	SinOsc.ar([300, 299.9], 0, t.lagud(0.001, 0.01)*0.4)
}.play;
)

(
{
	var indices= {|i| LFTri.kr(0.1, i/8*4).range(0, 32).round}!8;
	var t= Duty.ar(100/s.sampleRate, 0, Dsieve(indices, MouseX.kr(2, 32)));
	HPF.ar(t, 9)*0.2!2
}.play;
)

(
{
	var indices= {|i| LFNoise0.kr(i+1*LFNoise2.kr(0.01, 0.05, 0.05), 64, 64).round}!128;
	var t= Duty.ar(MouseX.kr(10, 100, 1)/s.sampleRate, 0, Dsieve(indices, MouseY.kr(3, 500, 1)));
	HPF.ar(t, 9)*0.2!2
}.play;
)

::
